/* 
 * Tripartie Web API
 *
 * This document describes all use cases offered by the Tripartie Web API.<br /><br /> The Tripartie Web API allows you to easily create Transaction templates.<br /> A Transaction template allows a User (the Buyer) to safely initiate a Transaction pre-configured by another User (the Seller).<br /> This allows you to add a Secured Payment button on your website pages.<br /><br /> To facilitate working with the Web API, we built libraries for common development environment:<br/> <ul class=\"bullet\">   <li><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/tripartie/webapi-jsclient\">Javascript</a></li> </ul> <br/> You're reading the documentation for version 1.0 of the Web API.<br/> Go to version <select id=\"version-switcher\"></select> 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@tripartie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = TripartieWebAPI.CSharpClient.Client.OpenAPIDateConverter;

namespace TripartieWebAPI.CSharpClient.Model
{
    /// <summary>
    /// The package format&lt;br /&gt;&lt;strong&gt;Required for automatic shipping costs and shipping label generation.&lt;/strong&gt;
    /// </summary>
    [DataContract]
    public partial class RequestCreateTransactionTemplatePackageFormat :  IEquatable<RequestCreateTransactionTemplatePackageFormat>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestCreateTransactionTemplatePackageFormat" /> class.
        /// </summary>
        /// <param name="weight">The package weight, in grams..</param>
        /// <param name="length">The package length, in centimeters..</param>
        /// <param name="height">The package height, in centimeters..</param>
        /// <param name="width">The package width, in centimeters..</param>
        public RequestCreateTransactionTemplatePackageFormat(int weight = default(int), int length = default(int), int height = default(int), int width = default(int))
        {
            this.Weight = weight;
            this.Length = length;
            this.Height = height;
            this.Width = width;
        }
        
        /// <summary>
        /// The package weight, in grams.
        /// </summary>
        /// <value>The package weight, in grams.</value>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public int Weight { get; set; }

        /// <summary>
        /// The package length, in centimeters.
        /// </summary>
        /// <value>The package length, in centimeters.</value>
        [DataMember(Name="length", EmitDefaultValue=false)]
        public int Length { get; set; }

        /// <summary>
        /// The package height, in centimeters.
        /// </summary>
        /// <value>The package height, in centimeters.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int Height { get; set; }

        /// <summary>
        /// The package width, in centimeters.
        /// </summary>
        /// <value>The package width, in centimeters.</value>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestCreateTransactionTemplatePackageFormat {\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestCreateTransactionTemplatePackageFormat);
        }

        /// <summary>
        /// Returns true if RequestCreateTransactionTemplatePackageFormat instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestCreateTransactionTemplatePackageFormat to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestCreateTransactionTemplatePackageFormat input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Length == input.Length ||
                    (this.Length != null &&
                    this.Length.Equals(input.Length))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Length != null)
                    hashCode = hashCode * 59 + this.Length.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
